#
#
#
#	manualy set for datasets (when needed)
#
#	$pfix:incl=c					# for container datasets, (empty set, just to create path)
#	$pfix:incl=p					# for parent datasets, (empty set, for path and transfering set properties)
#	$pfix:incl=d					# for data datasets, (data dataset, will be snapped,backed,pruned)
#	$pfix:excl=[0,1]				# for excluded datasets
#
#	$pfix:minws=[bytes]				# optional (recursive) snap_type1 option
#									# minimum written to dataset before the need to snap. in bytes
#									# set 0 to overwrite inherited [bytes] on children etc...
#
#	$pfix:nsnap:[m,w,d,h]=[0,1]		# optional (recursive) snap_type3 option
#									# set 0 to disable snapshots for [m,w,d,h]
#									# set 1 to overwrite inherited 0 on children etc...
#
# 	script sets for snapshots
#
#	$pfix:snum=						# for snapshot numbering
#	$pfix:tsnum=					# transfered snap number
#
#	$pfix:stype:[1,2,3]:[m,w,d,h]
#	$pfix:sdate:Yn:my:wy:dm:hd
#
################################# script settings #################################

script_dir=~/zfs-auto-mod			# place to find the script files (!does not expand ~ when double quoted)

lock_dir=/var/run/lock/zfs-auto-mod # locking directory for locking functionality

zfs=/sbin/zfs						# if run as user, ssh or from crontab, $PATH might not get set to /sbin
zpool=/sbin/zpool					# if run as user, ssh or from crontab, $PATH might not get set to /sbin

wake_cmd=""							# etherwake command and options (wants -i int when more then one on system )
									# or wakeonlan (works for non root users)
									# if set to nothing (wake_cmd="") does not send etherwake

################################# global settings #################################

pfix="auto"							# prefix for set@[$pfix] snap names and all zfs $pfix:user:properties
									# scripts rely on pfix exensively (change with caution and foresight)

sort_type=2							# 1 auto dataset, optionaly set $pfix:incl=[c,p] for s_sets
									# 2 auto parent, optionaly set $pfix:incl=[c,d] for s_sets
									# 3 for manual, must set $pfix:incl=[c,p,d] for all incl s_sets
snap_type=2							# 1 simple, just a snap number
									# 2 simple, monthly weekly daily
									# 3 complex, monthly weekly daily hourly

strip_pool=0						# strip s_pool on destination sets

################################# source settings #################################

s_user="user"						# username for ssh login
s_ip="10.0.0.55"					# remote ip or name
s_mac="00:22:99:55:cc:bb"			# mac address for src server in remote_check

s_ssh="ssh"							# src ssh command and options
s_srv="$s_ssh $s_user@$s_ip"		# src ssh composite command to execute
s_srv=""							# if set to nothing (s_srv="") will do everything localy
s_zfs="$s_srv $zfs"					# final src zfs composite command to execute

s_pool="pool1"						# used in source search, fnc_pool-check.sh,
									# and appended to (d_path/s_pool/[s_sets])

s_sets="type2"						# sets to search in $s_pool/[s_sets]
									# if set to nothing searches whole s_pool

s_type=sbp							# (sp,sbp) just snap and prune, or snap backup and prune
									# sp allows prunning without $pfix:tsnum (ie without backups)

s_k=5								# source snaps to keep for snap_type1

									# source snaps to keep for snap_type[2,3]
s_km=2								# source snaps to keep for monthly
s_kw=4								# source snaps to keep for weekly
s_kd=6								# source snaps to keep for daily
s_kh=12								# source snaps to keep for hourly

################################# destination settings #################################

d_user="user"						# username for ssh login
d_ip="10.0.0.56"					# remote ip or hostname
d_mac="00:22:99:56:cc:bb"			# mac address for dest server in remote_check

d_ssh="ssh"							# dest ssh command and options
d_srv="$d_ssh $d_user@$d_ip"		# dest ssh composite command to execute
d_srv=""							# if set to nothing (d_srv="") will do everything localy
d_zfs="$d_srv $zfs"					# final dest zfs composite command to execute

d_pool="pool2"						# used in fnc_pool-check.sh

d_path="pool2/auto"					# destination path

d_type=pri							# (pri,sec) , primary or secondary backup type
									# sec does not set $pfix:tsnum as src prune is not checked against sec type

d_k=7								# dest snaps to keep for snap_type1

									# dest snaps to keep for snap_type[2,3]
d_km=4								# dest snaps to keep for monthly
d_kw=6								# dest snaps to keep for weekly
d_kd=7								# dest snaps to keep for daily
d_kh=12								# dest snaps to keep for hourly

################################# logging #################################

									# [STDOUT][STDERR] print to log reguardless of opts
verbose=1							# 0 for off, 1 for [INFO1], 2 for [INFO2], 3 for [DEBUG]
verbrecv=0							# 0 for off, 1 for [RECV-1]

									# fnc_sort_list debug options 0 for off
verblist=0							# include_i_array [LIST1]
verb_incl=0							# include_a_array [LIST2]
verb_dest=0							# dest_a_array [LIST3]
verb_clone=0						# clone_a_array [LIST4]

log_dir=/ramdisk/$pfix				# log directory
log_file3=$log_dir/backup.log		# log for primary output ( can combine multiple configs if sequential exec )
log_file6=$log_dir/send.log			# log only for zfs send output ( can combine multiple configs if sequential exec )

################################# date formating #################################

DATE=$(date +%Y-%m-%d) 				# date fromat for log headers and snapshot naming
TIME=$(date +%T)					# time format for log headers and snapshot naming

Yn=$(date +%Y)						# Year number (2022...)						- used in scripts
my=$(date +%m)						# month of the year (1-12)					- used in scripts
wy=$(date +%W)						# week of the year (0-53)(starting monday)	- used in scripts
dy=$(date +%j)						# day of the year (1-366)					- maybe later
dm=$(date +%d)						# day of the month (1-28,29,30,31)			- used in scripts
dw=$(date +%u)						# day of the week (1-7)(starting monday)	- used in scripts
hd=$(date +%H)						# hour of the day (0-23)					- used in scripts





# fake date vars for testing , when run from date_count.sh loop, otherwise coment out next 3 lines

Yn=$2; my=$3; wy=$4; dy=$5; dm=$6; dw=$7; hd=$8

DATE="$Yn-$my-$dm"
TIME="${hd}:00:00"



