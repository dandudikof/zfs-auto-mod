#
#	v1.01
#
#	manualy set for datasets (when needed)
#
#	$pfix:incl=c					# for container datasets, (empty set, just to create path)
#	$pfix:incl=p					# for parent datasets, (empty set, for path and transfering set properties)
#	$pfix:incl=d					# for data datasets, (data dataset, will be snapped,backed,pruned)
#	$pfix:excl=1					# for excluded datasets (recursive)
#
#	$pfix:nsnap=[0,1]				# optional (recursive) snap_type1 option
#									# set 0 to disable snapshots 
#									# set 1 to overwrite inherited 0 on children etc...
#
#	$pfix:minws=[bytes]				# optional (recursive) snap_type1 option
#									# minimum written to dataset before the need to snap. in bytes
#									# set to override default 0
#									# set to overwrite inherited value on children etc...
#
#	$pfix:nsnap:[m,w,d,h]=[0,1]		# optional (recursive) snap_type2 option
#									# set 0 to disable snapshots for [m,w,d,h]
#									# set 1 to overwrite inherited 0 on children etc...
#
#	$pfix:minws:[m,w,d,h]=[bytes]	# optional (recursive) snap_type2 option
#									# minimum written to dataset before the need to snap. in bytes
#									# set to override default 0 for [m,w,d,h]
#									# set again to overwrite inherited value on children etc...
#
# 	script sets for snapshots
#
#	$pfix:snum=						# for snapshot numbering
#	$pfix:tsnum=					# transfered snap number
#
#	$pfix:stype:[1,2]:[m,w,d,h]		# to identify snapshots for prune
#	$pfix:sdate:Yn:my:wy:dm:hd		# to check if snapshot is needed
#
#	zfs-auto-mod:v=$v				# version control on snapshots
#	zfs-auto-mod:d=Yn:my:dm:hd:mh	# date-time control on snapshots
#
################################# script settings #################################

script_dir=~/zfs-auto-mod			# place to find the script files (!does not expand ~ when double quoted)

. $script_dir/config/shared.cfg		# source shared defaults

lock_dir=/ramdisk/run				# locking directory

log_dir=/ramdisk/log				# logging directory

log_file3=$log_dir/backup.log		# log for primary output ( can combine multiple configs if sequential exec )
log_file6=$log_dir/send.log			# log only for zfs send output ( can combine multiple configs if sequential exec )

################################# global settings #################################

pfix="auto"							# prefix for set@[$pfix] snap names and all zfs $pfix:user:properties
									# scripts rely on pfix exensively (change with caution and foresight)

set_type=p							# c for container, default type for $s_sets
									# p for parent, default type for $s_sets
									# d for dataset, default type for $s_sets

set_recurse=1						# recurse in to $s_sets

strip_pool=1						# strip s_pool on destination sets

snap_type=1							# 1 simple, just a snap number
									# 2 complex, monthly weekly daily hourly

pofix_snum=1						# append snap number to snapshots

################################# source settings #################################

s_user="user"						# username for ssh login
s_ip="10.0.0.55"					# remote ip or name
s_mac="00:22:99:55:cc:bb"			# mac address for src server in remote_check

s_ssh="ssh"							# src ssh command and options
s_srv="$s_ssh $s_user@$s_ip"		# src ssh composite command to execute
s_srv=""							# if set to nothing (s_srv="") will do everything localy
s_zfs="$s_srv $zfs"					# final src zfs composite command to execute

s_pool="pool1"						# used in source search, fnc_pool-check.sh,
									# and appended to (d_path/s_pool/[s_sets])

s_sets="type1"						# sets to search in $s_pool/[s_sets]
									# if set to nothing searches whole s_pool

s_type=sbp							# (sp,sbp) just snap and prune, or snap backup and prune
									# sp allows prunning without $pfix:tsnum (ie without backups)

s_k=5								# source snaps to keep for snap_type1

									# source snaps to keep for snap_type2
s_km=1								# source snaps to keep for monthly
s_kw=2								# source snaps to keep for weekly
s_kd=3								# source snaps to keep for daily
s_kh=6								# source snaps to keep for hourly

################################# destination settings #################################

d_user="user"						# username for ssh login
d_ip="10.0.0.56"					# remote ip or hostname
d_mac="00:22:99:56:cc:bb"			# mac address for dest server in remote_check

d_ssh="ssh"							# dest ssh command and options
d_srv="$d_ssh $d_user@$d_ip"		# dest ssh composite command to execute
d_srv=""							# if set to nothing (d_srv="") will do everything localy
d_zfs="$d_srv $zfs"					# final dest zfs composite command to execute

d_pool="pool2"						# used in fnc_pool-check.sh

d_path="pool2"						# destination path

d_type=pri							# (pri,sec) , primary or secondary backup type
									# sec does not set $pfix:tsnum as src prune is not checked against sec type

d_force=0							# force push , if source was rolled back (zfs recv -F)

d_k=7								# dest snaps to keep for snap_type1

									# dest snaps to keep for snap_type2
d_km=2								# dest snaps to keep for monthly
d_kw=4								# dest snaps to keep for weekly
d_kd=6								# dest snaps to keep for daily
d_kh=12								# dest snaps to keep for hourly

################################# logging #################################

									# [STDOUT][STDERR] print to log reguardless of opts
verbose=1							# 0 for off, 1 for [info1], 2 for [info2], 3 for [DEBUG]
verbrecv=0							# 0 for off, 1 for [recv-1]

									# fnc_sort_list debug options 0 for off
verblist=0							# include_array [LIST1]
verb_incl=0							# include_Array [LIST2]
verb_dest=0							# dest_Array [LIST3]
verb_clone=0						# clone_Array [LIST4]



# fake date vars for testing , when run from exec_date-count.sh loop, otherwise coment out next 3 lines

Yn=$2; my=$3; wy=$4; dy=$5; dm=$6; dw=$7; hd=$8

DATE="$Yn-$my-$dm"
TIME="${hd}-00-00"



